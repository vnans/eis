<?php

namespace App\Controller;

use App\Entity\Realisation;
use App\Form\RealisationType;
use App\Repository\RealisationRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\guessExtension;


/**
 * @Route("/realisation")
 */
class RealisationController extends AbstractController
{
    /**
     * @Route("/", name="realisation_index", methods={"GET"})
     */
    public function index(RealisationRepository $realisationRepository): Response
    {
        return $this->render('realisation/index.html.twig', [
            'realisations' => $realisationRepository->findAll(),
        ]);
    }

    /**
     * @Route("/new", name="realisation_new", methods={"GET","POST"})
     */
    public function new(Request $request): Response
    {
        $realisation = new Realisation();
        $form = $this->createForm(RealisationType::class, $realisation);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
          // ajouter d'image
          $file1 = $realisation->getImage();
          $file2 = $realisation->getPiecejointe();
          // recuperer lextention
          $fileName1 = $this->generateUniqueFileName().'.'.$file1->guessExtension();
          $fileName2 = $this->generateUniqueFileName().'.'.$file2->guessExtension();
                    // moves the file to the directory where brochures are stored
          $file1->move($this->getParameter('images_directory'), $fileName1); // stock image dans /public/img
          $file2->move($this->getParameter('images_directory'), $fileName2); // stock image dans /public/img

                    // enreg l'image
          $realisation->setImage($fileName1);
          $realisation->setPiecejointe($fileName2);

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($realisation);
            $entityManager->flush();

            return $this->redirectToRoute('realisation_index');
        }

        return $this->render('realisation/new.html.twig', [
            'realisation' => $realisation,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="realisation_show", methods={"GET"})
     */
    public function show(Realisation $realisation): Response
    {
        return $this->render('realisation/show.html.twig', [
            'realisation' => $realisation,
        ]);
    }

    /**
     * @Route("/{id}/edit", name="realisation_edit", methods={"GET","POST"})
     */
    public function edit(Request $request, Realisation $realisation): Response
    {
        $form = $this->createForm(RealisationType::class, $realisation);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
          // ajouter d'image
          $file1 = $realisation->getImage();
          $file2 = $realisation->getPiecejointe();
          // recuperer lextention
          $fileName1 = $this->generateUniqueFileName().'.'.$file1->guessExtension();
          $fileName2 = $this->generateUniqueFileName().'.'.$file2->guessExtension();
                    // moves the file to the directory where brochures are stored
          $file1->move($this->getParameter('images_directory'), $fileName1); // stock image dans /public/img
          $file2->move($this->getParameter('images_directory'), $fileName2); // stock image dans /public/img

                    // enreg l'image
          $realisation->setImage($fileName1);
          $realisation->setPiecejointe($fileName2);

            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('realisation_index');
        }

        return $this->render('realisation/edit.html.twig', [
            'realisation' => $realisation,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="realisation_delete", methods={"DELETE"})
     */
    public function delete(Request $request, Realisation $realisation): Response
    {
        if ($this->isCsrfTokenValid('delete'.$realisation->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($realisation);
            $entityManager->flush();
        }

        return $this->redirectToRoute('realisation_index');
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }



}
