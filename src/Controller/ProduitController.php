<?php

namespace App\Controller;

use App\Entity\Produit;
use App\Form\ProduitType;
use App\Repository\ProduitRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\guessExtension;

/**
 * @Route("/produit")
 */
class ProduitController extends AbstractController
{
    /**
     * @Route("/", name="produit_index", methods={"GET"})
     */
    public function index(ProduitRepository $produitRepository): Response
    {
        return $this->render('produit/index.html.twig', [
            'produits' => $produitRepository->findAll(),
        ]);
    }

    /**
     * @Route("/new", name="produit_new", methods={"GET","POST"})
     */
    public function new(Request $request): Response
    {
        $produit = new Produit();
        $form = $this->createForm(ProduitType::class, $produit);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
          // ajouter d'image
          $file1 = $produit->getImage();
          $file2 = $produit->getPiecejointe();
          // recuperer lextention
          $fileName1 = $this->generateUniqueFileName().'.'.$file1->guessExtension();
          $fileName2 = $this->generateUniqueFileName().'.'.$file2->guessExtension();
                    // moves the file to the directory where brochures are stored
          $file1->move($this->getParameter('images_directory'), $fileName1); // stock image dans /public/img
          $file2->move($this->getParameter('images_directory'), $fileName2); // stock image dans /public/img

                    // enreg l'image
          $produit->setImage($fileName1);
          $produit->setPiecejointe($fileName2);

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($produit);
            $entityManager->flush();

            return $this->redirectToRoute('produit_index');
        }

        return $this->render('produit/new.html.twig', [
            'produit' => $produit,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="produit_show", methods={"GET"})
     */
    public function show(Produit $produit): Response
    {
        return $this->render('produit/show.html.twig', [
            'produit' => $produit,
        ]);
    }

    /**
     * @Route("/{id}/edit", name="produit_edit", methods={"GET","POST"})
     */
    public function edit(Request $request, Produit $produit): Response
    {
        $form = $this->createForm(ProduitType::class, $produit);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
          // ajouter d'image
          $file1 = $produit->getImage();
          $file2 = $produit->getPiecejointe();
          // recuperer lextention
          $fileName1 = $this->generateUniqueFileName().'.'.$file1->guessExtension();
          $fileName2 = $this->generateUniqueFileName().'.'.$file2->guessExtension();
                    // moves the file to the directory where brochures are stored
          $file1->move($this->getParameter('images_directory'), $fileName1); // stock image dans /public/img
          $file2->move($this->getParameter('images_directory'), $fileName2); // stock image dans /public/img

                    // enreg l'image
          $produit->setImage($fileName1);
          $produit->setPiecejointe($fileName2);
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('produit_index');
        }

        return $this->render('produit/edit.html.twig', [
            'produit' => $produit,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="produit_delete", methods={"DELETE"})
     */
    public function delete(Request $request, Produit $produit): Response
    {
        if ($this->isCsrfTokenValid('delete'.$produit->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($produit);
            $entityManager->flush();
        }

        return $this->redirectToRoute('produit_index');
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }



}
